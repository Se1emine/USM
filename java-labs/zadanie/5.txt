Лабораторная работа №5. Generics. Обобщенные классы и методы

Простое обобщение: Создайте простой обобщённый класс Box<T>,, который может хранить объект любого типа. Добавьте методы для установки и получения значения. Обобщённые методы: Добавьте в класс Box обобщённый метод compareTo(T other) , где T должен реализовывать Comparable<T>. Метод будет сравнивать значения внутри двух коробок.
Множественные параметры типов: Создайте обобщённый класс Pair<T, V>, который будет хранить два значения разных типов. Реализуйте методы для получения и изменения этих значений.
Ограничение типа (extends): Создайте класс Storage<T extends Number>, который будет принимать только объекты числовых типов (Integer, Double и т.д.). Реализуйте метод для вычисления среднего значения хранимых чисел.
Ограничение типа (super): Реализуйте метод, который принимает List<? super Number> и заполняет его числами. Объясните разницу между extends и super.
Обобщённые интерфейсы: Создайте интерфейс Container<T>, который имеет методы для добавления и получения элементов. Затем создайте класс, который реализует этот интерфейс для различных типов данных.
Обобщённый стек: Создайте обобщённый класс Stack<T>, реализующий структуру данных стек. Реализуйте методы push, pop, и peek.
Обобщённая очередь: Создайте обобщённый класс Queue<T>, который реализует очередь. Реализуйте методы добавления в очередь и извлечения из неё.
Обобщённый массив: Создайте обобщённый класс GenericArray<T>, который хранит массив объектов. Реализуйте методы для добавления и получения элементов.
Массив в качестве обобщённого параметра: Попробуйте создать массив типа T[] внутри обобщённого класса и объясните, почему это может быть проблемой. Как можно это обойти? Объясните проблемы и предложите альтернативное решение с помощью коллекций, таких как ArrayList.
Обобщённая коллекция: Реализуйте класс SimpleList<T>, который будет имитировать базовую структуру списка. Добавьте методы для добавления, удаления и получения элементов.
Методы с обобщёнными параметрами: Создайте класс с обобщённым методом, который принимает два аргумента и возвращает больший из них (используя интерфейс Comparable<T>.).
Обобщённые конструкторы: Создайте класс с обобщённым конструктором, который будет принимать параметры различных типов и устанавливать их в соответствующие поля класса.
Обобщённые исключения: Попробуйте создать класс с обобщённым методом, который может выбрасывать исключения обобщённого типа. Объясните, почему это не работает, и найдите альтернативные решения.
Обобщённый компаратор: Создайте обобщённый класс GenericComparator<T>, который будет использоваться для сравнения двух объектов любого типа, если они реализуют интерфейс Comparable<T>..
Параметризация обобщённого класса другим обобщённым классом: Создайте обобщённый класс Wrapper<T>, который принимает другой обобщённый класс в качестве параметра. Реализуйте методы для взаимодействия с вложенным обобщённым классом (взаимодействие между the outer and inner generic classes).
Обобщённый класс с наследованием: Создайте иерархию обобщённых классов, где один класс наследует другой. Например, класс Box<T> может быть расширен классом ColoredBox<T>.
Wildcard-обобщения: Реализуйте метод, который принимает список с wildcard (List<?>) и выводит все элементы в консоль. Обсудите ограничения и преимущества использования подстановочных ( (Объясните, когда и почему каждый из этих типов используется).
**Обобщённые классы с рефлексией: Реализуйте обобщённый класс, который использует рефлексию для создания объектов типа T. Объясните, как обобщения взаимодействуют с рефлексией.
Обобщённые классы с Enum: Создайте обобщённый класс, который использует перечисление Enum в качестве ограниченного типа (T extends Enum<T>). Реализуйте методы для работы с перечислениями.